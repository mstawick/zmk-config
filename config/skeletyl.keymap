/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define NUM  1
#define FUN  2
#define SYS  3
#define NAV  4
#define MEDIA 5
#define SYM   6
#define GAMING 7

#define LEFT_KEYS  0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 34 35 16 17 18 19
#define RIGHT_KEYS 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 34 35 10 11 12 13

#define THUMB_TERM 1000
#define HOME_TERM  1000
#define PINKY_TERM 1000

/ {
    behaviors {
         pnk: pinky_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "PINKY_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <PINKY_TERM>;// <---[[produces tap if held longer than tapping-term-ms]]

            bindings =
                <&kp>,
                <&kp>;
        };
        hml: left_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <HOME_TERM>;// <---[[produces tap if held longer than tapping-term-ms]]

            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <RIGHT_KEYS>;
        };
        hmr: right_hand_positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <HOME_TERM>;// <---[[produces tap if held longer than tapping-term-ms]]

            bindings =
                <&kp>,
                <&kp>;

            hold-trigger-key-positions = <LEFT_KEYS>;
        };
        hmll: left_hand_positional_hold_tap_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_POSITIONAL_HOLD_TAP_LAYER";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <THUMB_TERM>;// <---[[produces tap if held longer than tapping-term-ms]]

            bindings =
                <&mo>,
                <&kp>;

            hold-trigger-key-positions = <RIGHT_KEYS>;
        };
        hmrl: right_hand_positional_hold_tap_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_POSITIONAL_HOLD_TAP_LAYER";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <THUMB_TERM>;// <---[[produces tap if held longer than tapping-term-ms]]

            bindings =
                <&mo>,
                <&kp>;

            hold-trigger-key-positions = <LEFT_KEYS>;

        };

        plchar: polish_chars {
            compatible = "zmk,behavior-hold-tap";
            label = "POLISH_CHARS";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <THUMB_TERM>;// <---[[produces tap if held longer than tapping-term-ms]]

            bindings =
                <&kp>,
                <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_meta {
            timeout-ms = <50>;
            key-positions = <10 19>;
            bindings = <&kp LGUI>;
        };

//        combo_ralt_left {
//            timeout-ms = <10>;
//            key-positions = <1 2>; // we
//            bindings = <&kp RALT>;
//        };
//
//        combo_ralt_right {
//            timeout-ms = <10>;
//            key-positions = <7 8>; // io
//            bindings = <&kp RALT>;
//        };

        combo_bt_layer {
            timeout-ms = <100>;
            key-positions = <33 34>; // enter bspace
            bindings = <&mo SYS>;
        };

        combo_gaming {
          timeout-ms = <100>;
          key-positions = <1 2 7 8>;
          bindings = <&tog GAMING>;
        };
    };

    macros {
        mcopy: mcopy {
            label = "mcopy";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp C>,
                <&macro_release>,
                <&kp LCTRL>;
        };
        mpaste: mpaste {
            label = "mpaste";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp V>,
                <&macro_release>,
                <&kp LCTRL>;
        };
        mcut: mcut {
            label = "mcut";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp X>,
                <&macro_release>,
                <&kp LCTRL>;
        };
        mredo: mredo {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_press>,
                <&kp LSHIFT>,
                <&macro_tap>,
                <&kp Z>,
                <&macro_release>,
                <&kp LSHIFT>,
                <&macro_release>,
                <&kp LCTRL>;
        };
        mundo: mundo {
            compatible = "zmk,behavior-macro";
            label = "new_macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LCTRL>,
                <&macro_tap>,
                <&kp Z>,
                <&macro_release>,
                <&kp LCTRL>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
     &hml RALT Q        &kp W         &kp E          &kp R     &kp T                  &kp Y              &kp U           &kp I        &kp O                &hmr RALT P
     &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHIFT F     &kp G                  &kp H      &hmr RSHIFT J    &hmr RCTRL K  &hmr LALT L  &hmr RGUI APOSTROPHE
           &kp Z        &kp X         &kp C          &kp V     &kp B                  &kp N              &kp M        &kp CMMA      &kp DOT            &kp SLASH
                          &hmll 5 ESC  &hmll 4 SPACE   &plchar RALT TAB                  &hmrl 6 ENTER  &hmrl 1 BACKSPACE  &hmrl 2 DELETE
            >;
        };

        NUM {
            bindings = <
  &kp LEFT_BRACKET  &kp N7   &kp N8  &kp N9  &kp RIGHT_BRACKET          &trans  &trans  &trans  &trans  &trans
     &kp SEMICOLON  &kp N4   &kp N5  &kp N6          &kp EQUAL          &trans  &trans  &trans  &trans  &trans
         &kp GRAVE  &kp N1   &kp N2  &kp N3      &kp BACKSLASH          &trans  &trans  &trans  &trans  &trans
                                   &kp DOT  &kp N0          &kp MINUS          &trans  &trans  &trans
            >;
        };

        FUN {
            bindings = <
  &kp F12  &kp F7       &kp F8     &kp F9  &kp PRINTSCREEN          &trans  &trans  &trans  &trans  &trans
   &kp F11  &kp F4       &kp F5     &kp F6   &kp SCROLLLOCK          &trans  &trans  &trans  &trans  &trans
   &kp F10  &kp F1       &kp F2     &kp F3  &kp PAUSE_BREAK          &trans  &trans  &trans  &trans  &trans
                          &kp K_CMENU  &kp SPACE          &kp TAB          &trans  &trans  &trans
            >;
        };

        SYS {
            bindings = <
       &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4               &trans  &trans  &trans  &trans  &trans
             &trans        &trans        &trans        &trans        &trans               &trans  &trans  &trans  &trans  &trans
 &bt BT_CLR                &trans        &trans        &trans        &trans               &trans  &trans  &trans  &trans  &trans
                                               &trans        &sys_reset   &bootloader          &bootloader  &sys_reset  &trans
            >;
        };

        NAV {
            bindings = <
   &trans  &trans  &trans  &trans  &trans                &trans        &trans         &trans      &trans     &trans
   &trans  &trans  &trans  &trans  &trans          &kp CAPSLOCK       &kp LEFT       &kp DOWN     &kp UP  &kp RIGHT
   &trans  &trans  &trans  &trans  &trans            &kp INSERT       &kp HOME  &kp PAGE_DOWN  &kp PG_UP    &kp END
                         &trans  &trans  &trans             &kp ENTER  &kp BACKSPACE     &kp DELETE
            >;
        };

        MEDIA {
            bindings = <
   &trans  &trans  &trans  &trans  &trans              &trans            &trans        &trans        &trans      &trans
   &trans  &trans  &trans  &trans  &trans              &trans    &kp C_PREVIOUS  &kp C_VOL_DN  &kp C_VOL_UP  &kp C_NEXT
   &trans  &trans  &trans  &trans  &trans              &trans            &trans        &trans        &trans      &trans
                         &trans  &trans  &trans          &kp C_STOP  &kp C_PLAY_PAUSE    &kp C_MUTE
            >;
        };

        SYM {
            bindings = <
   &kp LEFT_BRACE    &kp AMPERSAND              &kp STAR   &kp LEFT_PARENTHESIS  &kp RIGHT_BRACE          &trans  &trans  &trans  &trans  &trans
        &kp COLON       &kp DOLLAR           &kp PERCENT              &kp CARET         &kp PLUS          &trans  &trans  &trans  &trans  &trans
        &kp TILDE  &kp EXCLAMATION                &kp AT               &kp HASH         &kp PIPE          &trans  &trans  &trans  &trans  &trans
                                          &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp UNDERSCORE          &trans  &trans  &trans
            >;
        };

        GAMING {
           bindings = <
     &kp Q        &kp W         &kp E          &kp R     &kp T                  &kp Y              &kp U           &kp I        &kp O                &hmr RALT P
     &kp A  &kp S  &kp D  &kp F     &kp G                  &kp H      &hmr RSHIFT J    &hmr RCTRL K  &hmr LALT L  &hmr RGUI APOSTROPHE
           &kp Z        &kp X         &kp C          &kp V     &kp B                  &kp N              &kp M        &kp CMMA      &kp DOT            &kp SLASH
                          &kp ESC  &kp SPACE   &kp TAB                  &hmrl 6 ENTER  &hmrl 1 BACKSPACE  &hmrl 2 DELETE
          >;
        };
    };
};
